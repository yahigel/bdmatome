@page "/counter"
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<EditForm Model="@this" OnValidSubmit="@SearchBirthday">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="birthday" class="form-label">Enter Birthday:</label>
        <InputDate @bind-Value="@inputBirthday" id="birthday" class="form-control" />
        <ValidationMessage For="@(() => inputBirthday)" />
    </div>

    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>
<br />
@if (searchPerformed)
{
    if (matchedType != null)
    {
        <div class="card">
            <div class="card-header">
                Birthday Analyze Details
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">動物： @matchedType.Ani60 @matchedType.Ani12</li>
                <li class="list-group-item">ＢＤＳ６０： @matchedType.SixtyType</li>
                <li class="list-group-item">ＢＤＳ１２： @matchedType.TwelveType</li>
                <li class="list-group-item">インサイド１２： @matchedType.InsideType</li>
                <li class="list-group-item">フォーカス１２： @matchedType.FocusType</li>
                <li class="list-group-item">詳細：<br/> @matchedType.Setume</li>
            </ul>
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No matching user found.
        </div>
    }
}

@code {
    private DateTime inputBirthday;
    private Type60? matchedType;
    private bool searchPerformed = false;

    private async Task SearchBirthday()
    {
        try
        {
            var httpClient = new HttpClient();
            var bdss = await httpClient.GetFromJsonAsync<List<Type60>>("https://localhost:7165/data/60t.json");

            DateTime epoch = new DateTime(1899, 12, 30);
            int daysSinceEpoch = (inputBirthday - epoch).Days;
            int remainder = daysSinceEpoch % 60;

            matchedType = bdss?.FirstOrDefault(t => t.SixtyType == remainder.ToString());
            searchPerformed = true;
        }
        catch (Exception ex)
        {
            // ここでエラーを処理します（例: ログを記録する）
        }
    }

    public class Type60
    {
        public string SixtyType { get; set; }
        public string TwelveType { get; set; }
        public string InsideType { get; set; }
        public string FocusType { get; set; }
        public string Setume { get; set; }
        public string Ani60 { get; set; }
        public string Ani12 { get; set; }
    }
}